// https://leetcode.com/problems/minimum-window-substring/
// Not optimal, takes O(52n)

class Solution {
    public String minWindow(String s, String t) {
        int l = 0;
        int fl = 0, fr = s.length();
        Map<Character, Integer> map1 = new HashMap<>();
        Map<Character, Integer> map2 = new HashMap<>();

        if(t.length() > s.length())
            return "";

        for(int i=0;i<t.length();i++) {
            char ch = t.charAt(i);
            map1.put(ch, map1.getOrDefault(ch, 0) + 1);
        }

        for(int r=0;r<s.length();r++) {
            char ch = s.charAt(r);
            if(map1.containsKey(ch))
                map2.put(ch, map2.getOrDefault(ch, 0) + 1);

            while(match(map1, map2)) {
                if(r-l+1 < fr-fl+1) {
                    fr = r;
                    fl = l;
                }

                char ch2 = s.charAt(l++);
                if(map2.containsKey(ch2)) {
                    if(map2.get(ch2) > 1)
                        map2.put(ch2, map2.get(ch2) - 1);
                    else
                        map2.remove(ch2);
                }
            }
        }

        return fr == s.length() ? "": s.substring(fl, fr+1);
    }

    boolean match(Map<Character, Integer> map1, Map<Character, Integer> map2) {
        for(char ch : map1.keySet()) {
            if((int)map2.getOrDefault(ch, 0) < (int)map1.get(ch))
                return false;
        }
        return true;
    }
}
