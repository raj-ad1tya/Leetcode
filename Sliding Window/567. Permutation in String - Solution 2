// https://leetcode.com/problems/permutation-in-string/
// Integer object cannot be compared using == either use equals or typecasting

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int l = 0;
        int matches = 0;

        Map<Character, Integer> map1 = new HashMap<>();
        Map<Character, Integer> map2 = new HashMap<>();

        for(int i=0;i<s1.length();i++) {
            char ch = s1.charAt(i);

            if(map1.containsKey(ch))
                map1.put(ch, map1.get(ch)+1);
            else
                map1.put(ch, 1);
        }

        for(int r=0; r<s2.length(); r++) {
            char ch = s2.charAt(r);

            map2.put(ch, map2.getOrDefault(ch, 0) + 1);
            if((int)map1.getOrDefault(ch, 0) == (int)map2.get(ch))
                matches++;
            else if((int)map1.getOrDefault(ch, 0) == (int)map2.get(ch) - 1)
                matches--;

            if(r-l+1 > s1.length()) {
                char ch2 = s2.charAt(l++);

                if((int)map1.getOrDefault(ch2, 0)  == map2.get(ch2))
                    matches--;
                else if((int)map1.getOrDefault(ch2, 0)  == map2.get(ch2) - 1)
                    matches++;

                if(map2.get(ch2) > 1)
                    map2.put(ch2, map2.get(ch2) - 1);
                else
                    map2.remove(ch2);
            }

            if(r == s1.length() - 1) {
                matches = countMatches(map1, map2);
            }

            if(matches == 26)
                return true;
        }

        return false;
    }

    int countMatches(Map<Character, Integer> map1, Map<Character, Integer> map2) {
        int count = 0;

        for(char i = 'a'; i<='z'; i++) {
            if((int)map1.getOrDefault(i, 0) == (int)map2.getOrDefault(i, 0)) {
                count++;
            }
        }

        return count;
    }
}
